---
- name: Installer les dépendances pour Docker
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
    update_cache: yes

- name: Ajouter la clé GPG officielle Docker
  ansible.builtin.shell: |
    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    chmod a+r /etc/apt/keyrings/docker.gpg
  args:
    creates: /etc/apt/keyrings/docker.gpg

- name: Ajouter le dépôt officiel Docker
  ansible.builtin.shell: |
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  args:
    creates: /etc/apt/sources.list.d/docker.list

- name: Installer Docker Engine et Compose V2
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
    update_cache: yes

- name: S'assurer que Docker est démarré et activé
  service:
    name: docker
    state: started
    enabled: yes

- name: Vérifier si le port 8080 est occupé
  shell: "ss -tulpn | grep ':8080 ' || true"
  register: port_8080_check
  changed_when: false

- name: Stopper le conteneur qui occupe le port 8080 (si trouvé)
  shell: |
    cid=$(docker ps --filter "publish=8080" --format "{{'{{'}}.ID{{'}}'}}")
    if [ -n "$cid" ]; then docker stop "$cid" && docker rm "$cid"; fi
  when: port_8080_check.stdout != ""

- name: Authentifier Docker auprès de GHCR
  community.docker.docker_login:
    registry_url: ghcr.io
    username: "{{ ghcr_username }}"
    password: "{{ ghcr_token }}"

- name: Pull de la dernière image Docker depuis GHCR
  community.docker.docker_image:
    name: "{{ image_name }}"
    source: pull

- name: Lancer le conteneur de l'application
  community.docker.docker_container:
    name: monapp
    image: "{{ image_name }}"
    state: started
    restart_policy: always
    ports:
      - "{{ ic_webapp_port }}:8080"
    env:
      ODOO_URL: "{{ odoo_url }}"
      PGADMIN_URL: "{{ pgadmin_url }}"
